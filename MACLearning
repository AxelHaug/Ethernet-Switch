LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;
USE ieee.std_logic_unsigned.ALL;
USE std.textio.ALL;

ENTITY MACLearning IS
     PORT (
	clk             : IN std_logic;                      -- system clock
	reset           : IN std_logic;                      -- asynchronous reset
	src1		: IN std_logic_vector(47 downto 0);  -- source addresss port 1
	src2		: IN std_logic_vector(47 downto 0);  -- source addresss port 2
	src3		: IN std_logic_vector(47 downto 0);  -- source addresss port 3
	src4		: IN std_logic_vector(47 downto 0);  -- source addresss port 4
	dst1		: IN std_logic_vector(47 downto 0);  -- destination address port 1
	dst2		: IN std_logic_vector(47 downto 0);  -- destination address port 2
	dst3		: IN std_logic_vector(47 downto 0);  -- destination address port 3
	dst4		: IN std_logic_vector(47 downto 0);  -- destination address port 4
	read_port       : IN std_logic_vector(3 DOWNTO 0);   -- source ports
	write_port      : OUT std_logic_vector(3 downto 0)   -- destination ports
     );
END MACLearning;

ARCHITECTURE MACLearning_arch of MACLearning is
SIGNAL source, destination : std_logic_vector(47 downto 0);
SIGNAl roundRobin : std_logic_vector(1 downto 0);
SIGNAL address : std_logic_vector(12 downto 0);

BEGIN

----------------------------------   SCHEDULER   ----------------------------------
SCHEDULER : PROCESS(clk)

BEGIN
IF(rising_edge(clk)) THEN
IF(roundRobin = 0 and read_port(0)='1') THEN
source <= src1;
destination <= dst1;

ELSIF(roundRobin = 1 and read_port(1) = '1') THEN
source <= src2;
destination <= dst2;

ELSIF(roundRobin = 2 and read_port(2) = '1') THEN
source <= src3;
destination <= dst3;

ELSIF(roundRobin = 3 and read_port(3) = '1') THEN
source <= src4;
destination <= dst4;

END IF;

roundRobin <= roundRobin + 1;
END IF;
END PROCESS;

----------------------------------   LEARNING   ----------------------------------
LEARNING : PROCESS(clk)
VARIABLE addressCalc : std_logic_vector(12 downto 0);
BEGIN
IF(rising_edge(clk)) THEN
addressCalc := source(47 downto 35);
addressCalc := addressCalc XOR source(34 downto 22);
addressCalc := addressCalc XOR source(21 downto 9);
addressCalc := (addressCalc(12 downto 4) XOR source(8 downto 0)) & addressCalc(3 downto 0);

address <= addressCalc;
END IF;
END PROCESS;


END ARCHITECTURE;
